---

# FIXME: Run on a linear range of sizes, not exponential

# scalability experiments
- mode:
    Batch

  datasets:
    - Random:
        seed: [123]
        n: [10000000]
        start_times:
          - Uniform: { low: 1, high: 10000000 }
        durations:
          - Zipf: { n: 10000000, beta: 1 }
    - Reiterated:
        copies: 10
        base:
          Random:
            seed: [123]
            n: [10000000]
            start_times:
            - Uniform: { low: 1, high: 10000000 }
            durations:
            - Zipf: { n: 10000000, beta: 1 }
    - Reiterated:
        copies: 20
        base:
          Random:
            seed: [123]
            n: [10000000]
            start_times:
            - Uniform: { low: 1, high: 10000000 }
            durations:
            - Zipf: { n: 10000000, beta: 1 }
    - Reiterated:
        copies: 30
        base:
          Random:
            seed: [123]
            n: [10000000]
            start_times:
            - Uniform: { low: 1, high: 10000000 }
            durations:
            - Zipf: { n: 10000000, beta: 1 }
    - Reiterated:
        copies: 40
        base:
          Random:
            seed: [123]
            n: [10000000]
            start_times:
            - Uniform: { low: 1, high: 10000000 }
            durations:
            - Zipf: { n: 10000000, beta: 1 }
    - Reiterated:
        copies: 50
        base:
          Random:
            seed: [123]
            n: [10000000]
            start_times:
            - Uniform: { low: 1, high: 10000000 }
            durations:
            - Zipf: { n: 10000000, beta: 1 }


  queries:
    - RandomCapped:
        seed: [23512]
        n: [10000]
        cap: [10000000]
        range:
          - Pair: [
              Uniform: { low: 1, high: 10000000 },
              Zipf: { n: 10000000, beta: 1 }
          ]
        duration:
          - Single:
              Uniform: { low: 1, high: 10000 }

  algorithms:
    - BTree
    - GridFile:
        side_cells: [50, 100, 200, 300, 400]
    - PeriodIndexStar:
        num_buckets: [32, 64]
        num_levels: [4, 8]
    - RDIndex:
        dimension_order: [TimeDuration, DurationTime]
        page_size: [50, 100, 200, 300, 400]

########################################################################
#
# Flights
#
- mode:
    Batch

  datasets:
    - Flight
    - Reiterated:
        base: Flight
        copies: 10
    - Reiterated:
        base: Flight
        copies: 20
    - Reiterated:
        base: Flight
        copies: 30
    - Reiterated:
        base: Flight
        copies: 40
    - Reiterated:
        base: Flight
        copies: 50

  queries:
    - Random:
        seed: [23512]
        n: [10000]
        # Granularity of days, in minutes
        range:
          - Pair: 
              - Scaled: 
                  inner: {Uniform: { low: 1, high: 666 }}
                  scale: 1440 # one hour in minutes
              # Up to one month, in hours
              - Scaled:
                  inner: {Uniform: { low: 1, high: 744 }}
                  scale: 60
          
        duration:
          - Single: 
              # Up to one day, with granularity of minutes
              Scaled:
                inner: {Uniform: { low: 1, high: 1140 }}
                scale: 1

  algorithms:
    - BTree
    - GridFile:
        side_cells: [10, 100, 1000]
    - IntervalTree
    - PeriodIndexStar:
        num_buckets: [32, 64]
        num_levels: [4, 8]
    - RDIndex:
        dimension_order: [TimeDuration, DurationTime]
        page_size: [50, 100, 200, 300, 400]

######################################################################
#
# Webkit
#

- mode:
    Batch

  datasets:
    - Webkit
    - Reiterated:
        base: Webkit
        copies: 10
    - Reiterated:
        base: Webkit
        copies: 20
    - Reiterated:
        base: Webkit
        copies: 30
    - Reiterated:
        base: Webkit
        copies: 40
    - Reiterated:
        base: Webkit
        copies: 50

  queries:
    - Random:
        seed: [23512]
        n: [10000]
        range:
          # Granularity of minutes, in milliseconds
          - Pair:
              - Scaled:
                  inner: {Uniform: { low: 1, high: 6980952 }}
                  scale: 60000
              # Durations up to one year for the range queries, in milliseconds
              - Scaled:
                  inner: {Uniform: { low: 1, high: 31556925975 }}
                  scale: 60000
        duration:
          - Single: 
              # Duration ranges of up to 3 years, in milliseconds
              Uniform: { low: 1, high: 94670777924 }

  algorithms:
    - BTree
    - GridFile:
        side_cells: [10, 100, 1000]
    - IntervalTree
    - PeriodIndexStar:
        num_buckets: [32, 64]
        num_levels: [4, 8]
    - RDIndex:
        dimension_order: [TimeDuration, DurationTime]
        page_size: [50, 100, 200, 300, 400]

######################################################################
#
#  Tourism
#

- mode:
    Batch

  datasets:
    - Tourism
    - Reiterated:
        base: Tourism
        copies: 10
    - Reiterated:
        base: Tourism
        copies: 20
    - Reiterated:
        base: Tourism
        copies: 30
    - Reiterated:
        base: Tourism
        copies: 40
    - Reiterated:
        base: Tourism
        copies: 50

  queries:
    - Random:
        seed: [23512]
        n: [5000]
        range:
          - Pair: [
              Uniform: { low: 1, high: 2055 },
              # Durations up to one three months for the range queries, in days
              Uniform: { low: 1, high: 90 }
          ]
        duration:
          - Single: 
              # Duration ranges of up to four months, in days. Otherwise there are not
              # enough distinct queries.
              Uniform: { low: 1, high: 120 }

  algorithms:
    - BTree
    - GridFile:
        side_cells: [10, 100, 1000]
    - IntervalTree
    - PeriodIndexStar:
        num_buckets: [32, 64]
        num_levels: [4, 8]
    - RDIndex:
        dimension_order: [TimeDuration, DurationTime]
        page_size: [50, 100, 200, 300, 400]

